## this code should:
- take the monthly files (in txt-format, one commment per line) as input
- for each comment/line, find the additional features (with the help of pre-defined function for each feature)
- save the count for each feature per line into a new txt-file that can be combined with the output of the Biber-tagger

## this code still works on the assumption that one line == one comment
## if we want to split longer comments into individual sentences, this would have to be altered

import os
path = >>>specify file path here<<<

resultsfile = open("filepath","w")
for filename in os.listdir(path):
  textfile = open(filename, "r")
  linenumber = 0
  for line in textfile.readlines():
    linenumber += 1
# split character string into a list
    commentWL = line.split()
# extract the count for each feature with the pre-defined feature-functions
    feature1_counter = feature1_func(commentWL)
    feature2_counter = feature2_func(commentWL) 
    ...
# print the counts for each comment into a new file
    print(str(linenumber), + ";" + str(feature1_counter) + ";" + str(feature2_counter) + ...)
    textfile.close
resultsfile.close



## function for feature 1: hashtags
def feature1_func(wordlist):
  """This function takes a list of words as input and returns the number of items
  that contain at least one hashtag (#)."""
  counter = 0
  for item in wordlist:
    if "#" in item:
      counter = counter + 1
    else:
      pass
  return(counter)


## function for feature 2: URLS (maybe subdivide in u/..., r/..., and www...)
def feature2_func(wordlist):
  """This function takes a list of words as input and returns the number of items
  that contain an identifiable link to another user, subreddit, or website."""
  counter = 0
  for item in wordlist:
    if item.startswith("u/") or item.startswith("r/") or item.startswith("http") or item.startswith("www"):
      counter = counter + 1
    else:
      pass
  return(counter)


## function for feature 3: capitalisation 
def feature3_func(wordlist):
  """This function takes a list of words as input and returns the number of items
  that are in upper case only."""
  counter = 0
  for item in wordlist:
   if item.isupper():
      counter = counter + 1
    else:
      pass
  return(counter)
### maybe it would make sense to exclude "I" here, since it is usually upper case?
### And maybe also sentence initial "A"?


## function for feature 4: imperatives
def feature4_func(wordlist):
  """This function takes a list of words as input and returns the number of items
  that are an imperative."""
  counter = 0
  for item in wordlist:
   if :
      counter = counter + 1
    else:
      pass
  return(counter)

## function for feature 5: comparatives

## function for feature 6: superlatives

## function for feature 7: emoticons

## function for feature 8: question marks

## function for feature 9: exclamation marks

## function for feature 10: strategic lengthening

## function for feature 11: alternating uppercase-lowercase

## function for feature 12: community-specific acronyms/lexical items (such as 'op')


